name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: make deps

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ steps.version.outputs.VERSION }}
        run: |
          make clean
          make build

          # Create distribution directory
          mkdir -p dist

          # Set binary name with extension for Windows
          BINARY_NAME="xenforo-to-gh-discussions"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          # Create archive name
          ARCHIVE_NAME="xenforo-to-gh-discussions-${{ steps.version.outputs.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}"

          # Copy binary to dist with proper name
          cp "build/${BINARY_NAME}" "dist/${BINARY_NAME}"

          # Create archives
          if [ "${{ matrix.goos }}" = "windows" ]; then
            cd dist && zip -r "${ARCHIVE_NAME}.zip" "${BINARY_NAME}"
          else
            cd dist && tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
          fi

          # Create checksums
          cd dist
          if [ "${{ matrix.goos }}" = "windows" ]; then
            sha256sum "${ARCHIVE_NAME}.zip" > "${ARCHIVE_NAME}.zip.sha256"
          else
            sha256sum "${ARCHIVE_NAME}.tar.gz" > "${ARCHIVE_NAME}.tar.gz.sha256"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xenforo-to-gh-discussions-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find dist/ -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" | xargs -I {} cp {} release-assets/
          ls -la release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            # XenForo to GitHub Discussions Migration Tool ${{ steps.version.outputs.VERSION }}

            ${{ steps.release_notes.outputs.CHANGELOG }}

            ## Installation

            Download the appropriate binary for your platform from the assets below.

            ### Linux/macOS
            ```bash
            # Download and extract
            curl -L -o xenforo-to-gh-discussions.tar.gz https://github.com/exileum/xenforo-to-gh-discussions/releases/download/${{ steps.version.outputs.VERSION }}/xenforo-to-gh-discussions-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
            tar -xzf xenforo-to-gh-discussions.tar.gz
            chmod +x xenforo-to-gh-discussions

            # Move to PATH (optional)
            sudo mv xenforo-to-gh-discussions /usr/local/bin/
            ```

            ### Windows
            Download the `.zip` file, extract it, and run the `.exe` file.

            ## Usage
            ```bash
            ./xenforo-to-gh-discussions --help
            ```

            ## Checksums
            Verify your download using the provided `.sha256` files:
            ```bash
            sha256sum -c xenforo-to-gh-discussions-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz.sha256
            ```
          files: release-assets/*
          draft: false
          prerelease: false

  docker:
    name: Build & Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.VERSION }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            COMMIT_HASH=${{ github.sha }}
